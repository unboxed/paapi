---
name: deploy-environment

on:
  workflow_call:
    inputs:
      environment-name:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment-name }}

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment-name }}
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create an image tag based on the commit sha
        id: image_tag
        run: |
          echo "sha=$(echo ${GITHUB_SHA} | cut -c1-7)" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Expose GitHub Runtime for Docker build
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push ${{ inputs.environment-name }} image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: paapi/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=1 docker buildx build \
            --cache-to type=gha,mode=max \
            --cache-from type=gha \
            --load \
            -t paapi:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for db_migrate and strip unused properties
        env:
          IMAGE_ARN: ${{ steps.build-image.outputs.image }}
        run: |
          aws ecs describe-task-definition --task-definition paapi-db-migrate-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' | \
          jq -r '.containerDefinitions[].image = "'$IMAGE_ARN'"' > db_migrate.json

      - name: Register db_migrate on a new revision
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://db_migrate.json

      - name: Run db_migrate
        env:
          CLUSTER: paapi-${{ inputs.environment-name }}
          TASK_DEFINITION: paapi-db-migrate-${{ inputs.environment-name }}
          PAAPI_SUBNETS: subnet-${{ secrets.PAAPI_SUBNETS }}
          PAAPI_SG: sg-${{ secrets.PAAPI_SG }}
        run: |
          aws ecs run-task --cluster $CLUSTER \
            --task-definition $TASK_DEFINITION --launch-type FARGATE \
            --network-configuration '{"awsvpcConfiguration": {"subnets": ["'$PAAPI_SUBNETS'"],"securityGroups": ["'$PAAPI_SG'"],"assignPublicIp": "ENABLED"}}'

      - name: Download task definition for worker high-priority and strip unused properties
        env:
          IMAGE_ARN: ${{ steps.build-image.outputs.image }}
        run: |
          aws ecs describe-task-definition --task-definition paapi-worker-high-priority-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > worker-high-priority.json

      - name: Generate task definition for worker high-priority
        id: task-def-worker-high-priority
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: worker-high-priority.json
          container-name: paapi
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy worker high-priority
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-worker-high-priority.outputs.task-definition }}
          service: paapi-worker-high-priority-${{ inputs.environment-name }}
          cluster: paapi-${{ inputs.environment-name }}
          wait-for-service-stability: true

      - name: Download task definition for worker low-priority and strip unused properties
        env:
          IMAGE_ARN: ${{ steps.build-image.outputs.image }}
        run: |
          aws ecs describe-task-definition --task-definition paapi-worker-low-priority-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > worker-low-priority.json

      - name: Generate task definition for worker low-priority
        id: task-def-worker-low-priority
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: worker-low-priority.json
          container-name: paapi
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy worker low-priority
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-worker-low-priority.outputs.task-definition }}
          service: paapi-worker-low-priority-${{ inputs.environment-name }}
          cluster: paapi-${{ inputs.environment-name }}
          wait-for-service-stability: true

      - name: Download task definition for web and strip unused properties
        run: |
          aws ecs describe-task-definition --task-definition paapi-web-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > web.json

      - name: Generate task definition for web
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: web.json
          container-name: paapi
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy web
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: paapi-web-${{ inputs.environment-name }}
          cluster: paapi-${{ inputs.environment-name }}
          wait-for-service-stability: true
          codedeploy-appspec: .aws/appspec.yml
          codedeploy-application: paapi-${{ inputs.environment-name }}
          codedeploy-deployment-group: default
