# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/csv_uploads" do
  # This should return the minimal set of attributes required to create a valid
  # CsvUpload. As you add validations to CsvUpload, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip("Add a hash of attributes valid for your model")
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  describe "GET /index" do
    it "renders a successful response" do
      CsvUpload.create! valid_attributes
      get csv_uploads_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      csv_upload = CsvUpload.create! valid_attributes
      get csv_upload_url(csv_upload)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_csv_upload_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      csv_upload = CsvUpload.create! valid_attributes
      get edit_csv_upload_url(csv_upload)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new CsvUpload" do
        expect do
          post csv_uploads_url, params: { csv_upload: valid_attributes }
        end.to change(CsvUpload, :count).by(1)
      end

      it "redirects to the created csv_upload" do
        post csv_uploads_url, params: { csv_upload: valid_attributes }
        expect(response).to redirect_to(csv_upload_url(CsvUpload.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new CsvUpload" do
        expect do
          post csv_uploads_url, params: { csv_upload: invalid_attributes }
        end.not_to change(CsvUpload, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post csv_uploads_url, params: { csv_upload: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested csv_upload" do
        csv_upload = CsvUpload.create! valid_attributes
        patch csv_upload_url(csv_upload), params: { csv_upload: new_attributes }
        csv_upload.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the csv_upload" do
        csv_upload = CsvUpload.create! valid_attributes
        patch csv_upload_url(csv_upload), params: { csv_upload: new_attributes }
        csv_upload.reload
        expect(response).to redirect_to(csv_upload_url(csv_upload))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        csv_upload = CsvUpload.create! valid_attributes
        patch csv_upload_url(csv_upload), params: { csv_upload: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested csv_upload" do
      csv_upload = CsvUpload.create! valid_attributes
      expect do
        delete csv_upload_url(csv_upload)
      end.to change(CsvUpload, :count).by(-1)
    end

    it "redirects to the csv_uploads list" do
      csv_upload = CsvUpload.create! valid_attributes
      delete csv_upload_url(csv_upload)
      expect(response).to redirect_to(csv_uploads_url)
    end
  end
end
